业务场景：
1、启始：int数据类型排序，后面又想应用double，float，cat类型排序，sorter方法一直复制?--->范型

2、继承Comparable<T>之后还是不够灵活，猫类中有体重和身高，又想用身高去排序，想指定用哪个属性去比较的时候

3、比较器，每次想新增的时候新增个比较器，比较器=策略

策略模式是什么？
指对象有某个行为，但是在不同的场景中，该行为有不同的算法/实现。

为什么实用策略模式？
在一个业务中，有多个实现方式，多个算法，这个时候我们一般采用if/else的方式进行判断，但是条件越来越多的时候，过多的if else造成代码耦合度太高，若是有新的需求进来，又需要改动
代码，不好扩展，结果代码即复杂又难以维护。

为什么要用策略模式？
比如我们一开始的需求是做一个商品排序，把商品价格正序或者倒叙，这个时候我们的第一想法肯定是通过sql来去做相对应的order by xxx desc/asc ，
1、只是在一张表里，索引是生效的，那么我们可以通过order by 进行排序。
2、如果是多表关联查，又不是驱动表，这个时候会导致索引失效，影响查询效率。
3、分页，对当前页的商品价格正序或者倒叙呢？基本实现，取到当前页数据后，再作价格方面的正序或者是倒叙处理。这个时候我们如果再加其它方面的排序方式，如果说购买数量，那么我们这个时候难道再去if一套购买数量的排序方式？代码耦合度极高，真正不同的
地方就是当前应该是购买量去排序还是价格排序。这个时候我们就可以用策略模式。

应用场景
电商优惠价，根据策略模式来去做相对应的比较，找到合适的优惠卷，比如这件商品是衣服，优惠卷价格多少到多少可以用某个优惠卷，商品是食品，优惠卷价格多少到多少，这个时候会有if套if
这个时候我们可以创建相对应的策略，把if语句抽取到相对应到里面，业务场景里面只去判断类型，或者来说用工厂模式，创建相对应到策略类，维护的时候无需考虑业务场景具体实现，只需要在
工厂里面改变创造相对应的创造方式。


